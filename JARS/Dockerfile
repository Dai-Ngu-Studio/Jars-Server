# syntax=docker/dockerfile:1
FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build-env
ARG SSL_PASSWORD
ENV SSL_PASSWORD $SSL_PASSWORD
WORKDIR /app
EXPOSE 80
EXPOSE 443

# Copy csproj and restore as distinct layers
COPY *.sln ./
COPY JARS-API/*.csproj ./JARS-API/
COPY JARS-DAL/*.csproj ./JARS-DAL/
RUN dotnet restore

# Copy everything else and build
COPY JARS-API/. ./JARS-API/
COPY JARS-DAL/. ./JARS-DAL/
RUN dotnet publish -c Release -o out
RUN dotnet dev-certs https -ep /https/aspnetapp.pfx -p ${SSL_PASSWORD}
# Build runtime image
FROM mcr.microsoft.com/dotnet/aspnet:6.0
WORKDIR /app
EXPOSE 80
EXPOSE 443
COPY --from=build-env /app/out .
COPY --from=build-env /https/ /https/
ENTRYPOINT ["dotnet", "JARS-API.dll"]

#BELOW: Dockerfile generated by Visual Studio
#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.

#FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base
#WORKDIR /app
#EXPOSE 80
#EXPOSE 443
#
#FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build
#WORKDIR /src
#COPY ["JARS-API/JARS-API.csproj", "JARS-API/"]
#RUN dotnet restore "JARS-API/JARS-API.csproj"
#COPY . .
#WORKDIR "/src/JARS-API"
#RUN dotnet build "JARS-API.csproj" -c Release -o /app/build
#
#FROM build AS publish
#RUN dotnet publish "JARS-API.csproj" -c Release -o /app/publish
#
#FROM base AS final
#WORKDIR /app
#COPY --from=publish /app/publish .
#ENTRYPOINT ["dotnet", "JARS-API.dll"]
